import osos.environ['NLS_LANG'] = 'SIMPLIFIED CHINESE_CHINA.UTF-8'import pytesseractfrom PIL import Imageimport PIL.ImageOpsimport numpyimport copyclass img2int:    def __init__(self):        constr_list=[("L"+str(i)) for i in range(10)]+[("S"+str(i)) for i in range(10)]+["LN","SN"]        self.cmp = {}        for fname in constr_list:            self.cmp[fname] = Image.open("./dy_data/%s.jpeg"%fname)            self.cmp[fname] = numpy.array(self.cmp[fname].convert("1"))            self.cmp[fname] = self.move_format(self.cmp[fname])    def confirm(self,img,mode):        obj = [(mode+str(i)) for i in range(10)]+[mode+'N']        res = []        arr0 = numpy.array(img.convert("1"))        arr0 = self.move_format(arr0)        for ty in obj:            arr1 = self.cmp[ty]            num = self.shake_mate(arr0,arr1)            res.append(num)        ret = (res[10],0)        for i in range(10):            if res[i]<ret[0]:                ret = (res[i],i)        print((res,ret[1]))        retval = ret[1]        return retval    def shake_mate(self,img1,img2):        retvals = []        shake_rate = 5        for si in range(shake_rate):            for sj in range(shake_rate):                tarr = numpy.zeros((100,100),dtype=bool)                tarr[0:img1.shape[0],0:img1.shape[1]] ^= img1                tarr[si:img2.shape[0]+si,sj:img2.shape[1]+sj] ^= img2                retvals.append(sum(sum(tarr)))                tarr = numpy.zeros((100,100),dtype=bool)                tarr[0:img2.shape[0],0:img2.shape[1]] ^= img2                tarr[si:img1.shape[0]+si,sj:img1.shape[1]+sj] ^= img1                retvals.append(sum(sum(tarr)))        return min(retvals)    def move_format(self,arr):        ret = copy.deepcopy(arr)        # mid-val 5*5        for c in range(2,len(ret)-2):            for r in range(2,len(ret[0])-2):                if sum(sum(arr[c-2:c+3,r-2:r+3]))<5:                    ret[c][r] = False        for c in range(len(ret[0])):            ret[0][c] = False            ret[1][c] = False            ret[-1][c] = False            ret[-2][c] = False        for r in range(len(ret)):            ret[r][0] = False            ret[r][1] = False            ret[r][-1] = False            ret[r][-2] = False        # move        move_c = 0        while not max(ret[move_c]):            move_c+=1            if(move_c==len(arr)):                return ret        move_r = 0        while not max(ret[:,move_r]):            move_r+=1        for c in range(len(arr)):            for r in range(len(arr[0])):                try:                    ret[c][r]=ret[c+move_c][r+move_r]                except:                    ret[c][r]=False        return ret        cmp = img2int()class dy_score:    def __init__(self,path):        self.info = {            "format_size":(1600,1200),            "score_loc":[(1476-int(67*i)-55,400,1476-int(67*i),490) for i in range(7)],            "perf_loc":[(880+30*i,630,910+30*i,670) for i in range(4)],            "good_loc":[(880+30*i,680,910+30*i,720) for i in range(4)],            "miss_loc":[(880+30*i,730,910+30*i,770) for i in range(4)],            "combo_loc":[(880+30*i,780,910+30*i,820) for i in range(4)]            }        self.load_pic(path)        self.pic = {            "score":[self.format_cut(item) for item in self.info["score_loc"]],            "perfect":[self.format_cut(item) for item in self.info["perf_loc"]],            "good":[self.format_cut(item) for item in self.info["good_loc"]],            "miss":[self.format_cut(item) for item in self.info["miss_loc"]],            "combo":[self.format_cut(item) for item in self.info["combo_loc"]]            }        self.pic["score"].reverse()        data_key = ["score","perfect","good","miss","combo"]        self.data = {}        for key in data_key:            self.data[key] = self.list2int(key)        print(self.data)    def list2int(self,keywords):        mode = 'S'        if keywords=='score':mode='L'        res = []        for item in self.pic[keywords]:            res.append(cmp.confirm(item,mode))        ret = 0        for num in res:            ret = ret*10+num        return ret    def load_pic(self,path):        self.img = Image.open(path)        print(path,end="\t")        print(self.img.size)    def format_cut(self,box):        ret = self.img.resize(self.info["format_size"]).crop(box)        return self.bi_pic(ret)    def bi_pic(self,img):        ret = img.convert("L")        ret = numpy.array(ret)        for c in ret:            for r in range(len(c)):                if c[r]<230:                    c[r] = 0                else:                    c[r] = 255        ret = Image.fromarray(ret).convert("1")        return ret    sc = dy_score("./src_pic/test.png")